// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: collections.sql

package db

import (
	"context"
)

const addNoteToCollection = `-- name: AddNoteToCollection :exec
INSERT INTO collection_notes (collection_id, note_id)
VALUES ($1, $2)
`

type AddNoteToCollectionParams struct {
	CollectionID int64
	NoteID       int64
}

func (q *Queries) AddNoteToCollection(ctx context.Context, arg AddNoteToCollectionParams) error {
	_, err := q.db.Exec(ctx, addNoteToCollection, arg.CollectionID, arg.NoteID)
	return err
}

const getCollectionByIDAndWorkspace = `-- name: GetCollectionByIDAndWorkspace :one
SELECT id, name, description, created, updated, trashed, deleted, workspace_id, created_by_id, updated_by_id
FROM collection
WHERE id = $1
  AND workspace_id = $2
`

type GetCollectionByIDAndWorkspaceParams struct {
	ID          int64
	WorkspaceID int64
}

func (q *Queries) GetCollectionByIDAndWorkspace(ctx context.Context, arg GetCollectionByIDAndWorkspaceParams) (Collection, error) {
	row := q.db.QueryRow(ctx, getCollectionByIDAndWorkspace, arg.ID, arg.WorkspaceID)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Created,
		&i.Updated,
		&i.Trashed,
		&i.Deleted,
		&i.WorkspaceID,
		&i.CreatedByID,
		&i.UpdatedByID,
	)
	return i, err
}

const insertCollection = `-- name: InsertCollection :one
INSERT INTO collection (name, description, created, updated, trashed, deleted, workspace_id, created_by_id, updated_by_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type InsertCollectionParams struct {
	Name        string
	Description string
	Created     int64
	Updated     int64
	Trashed     bool
	Deleted     bool
	WorkspaceID int64
	CreatedByID int64
	UpdatedByID int64
}

func (q *Queries) InsertCollection(ctx context.Context, arg InsertCollectionParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertCollection,
		arg.Name,
		arg.Description,
		arg.Created,
		arg.Updated,
		arg.Trashed,
		arg.Deleted,
		arg.WorkspaceID,
		arg.CreatedByID,
		arg.UpdatedByID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
